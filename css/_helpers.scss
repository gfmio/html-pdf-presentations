//
// Helper functions
//

// Power function

@function pow($number, $exp) {
    $value: 1.0;
    @if $exp > 0 {
        // If the exponent is positive, multiply.
        @for $i from 1 through $exp {
            $value: $value * $number;
        }
    } @else if $exp < 0 {
        // If the exponent is negative, divide.
        @for $i from 1 through -$exp {
            $value: $value / $number;
        }
    } @else {
        // If the exponent is zero, just return 1.
        $value: 1;
    }
    @return $value;
}

// Strip units

@function strip-units($number) {
    @if unit($number) == "%" {
        @return $number / (100 * ($number * 0 + 1));
    }
    @return $number / ($number * 0 + 1);
}

// em function
// Converts units into ems or turns a number into an em-size

@function em($number) {
    @if unit($number) == "em" {
        @return strip-units($number) * 1.0em;
    } @else if unit($number) == "rem" {
        @return strip-units($number) * 1.0em;
    } @else if unit($number) == "%" {
        @return strip-units($number) * 1.0em;
    } @else if unit($number) == "px" {
        @return strip-units($number) / 16.0 * 1.0em;
    } @else if unit($number) == "pt" {
        @return strip-units($number) / 12.0 * 1.0em;
    } @else if unit($number) == "" {
        @return strip-units($number) * 1.0em;
    } @else {
        @return false;
    }
}

// rem function
// Converts units into rems or turns a number into an rem-size

@function rem($number) {
    @if unit($number) == "em" {
        @return strip-units($number) * 1.0rem;
    } @else if unit($number) == "rem" {
        @return strip-units($number) * 1.0rem;
    } @else if unit($number) == "%" {
        @return strip-units($number) * 1.0rem;
    } @else if unit($number) == "px" {
        @return strip-units($number) / 16.0 * 1.0rem;
    } @else if unit($number) == "pt" {
        @return strip-units($number) / 12.0 * 1.0rem;
    } @else if unit($number) == "" {
        @return strip-units($number) * 1.0rem;
    } @else {
        @return false;
    }
}

// Relative size
// returns desired size relative to font size (similar to rem, but more flexible)

@function relative-size($size, $font-size) {
    @return em(strip-units(em($size)) / strip-units(em($font-size)));
}

// Grid-line-height
// Determines the appropriate line-height for a respective font-size based on the base-line grid

@function grid-line-height($font-size, $base-line-height, $min-line-height: 1.2) {
    $result: 0.25 * strip-units(ceil(strip-units(relative-size(strip-units($font-size), 0.25 * strip-units($base-line-height)))) * 
        relative-size(strip-units($base-line-height), strip-units($font-size)));

    @if $result < $min-line-height {
        $result: 0.25 * strip-units(ceil(1.0+strip-units(relative-size(strip-units($font-size), 0.25 * strip-units($base-line-height)))) * 
            relative-size(strip-units($base-line-height), strip-units($font-size)));
    }

    @return $result;
}

// HSB color helper

@function hsb($hue, $saturation, $brightness) {
    @if (unit($saturation) != "%") {
        @if ($saturation > 1) {
            $saturation: $saturation * 1%;
        } @else {
            $saturation: $saturation * 100%;
        }
    }
    @if (unit($brightness) != "%") {
        @if ($brightness > 1) {
            $brightness: $brightness * 1%;
        } @else {
            $brightness: $brightness * 100%;
        }
    }

    $saturation: strip-units($saturation);
    $brightness: strip-units($brightness);

    $l: strip-units(0.5*$brightness*(2.0 - $saturation));
    @debug($l);
    $s: 1.0;
    @if ($l == 1.0) or ($l == 0.0) {
        $s: 0.0;
    } @else {
        $s: strip-units($brightness * $saturation / (1.0 - abs(2.0*$l - 1)));
    }
    @return hsl($hue, $s*100%, $l*100%);
}

// Get-item function
// Retrieves a value from a list of tuples with the first key acting as an index, similar to a dictionary

@function get-item($list, $index) {
  @each $item in $list {
    @if (nth($item, 1) == $index) {
      @return nth($item, 2)
    }
  }
  @return null;
}

// Relative percentage function

@function relative-percentage($change, $current) {
  @if ($change > 0) {
    @return $current + $change * strip_units(100 - $current);
  } @else {
    @return $current + $change * strip_units($current);
  }
}

//
// Mixins
//

// Prefixer

//---------------------------------------------------
//  Sass Prefixer
//  -------------------------------------------------
//  TABLE OF CONTENTS
//  (*) denotes a syntax-sugar helper
//  -------------------------------------------------
//
//      animation($args)
//          animation-delay($delay)
//          animation-direction($direction)
//          animation-duration($duration)
//          animation-fill-mode($mode)
//          animation-iteration-count($count)
//          animation-name($name)
//          animation-play-state($state)
//          animation-timing-function($function)
//      background-size($args)
//          inner-shadow($args) *
//      box-sizing($args)
//          border-box() *
//          content-box() *
//      columns($args)
//          column-count($count)
//          column-gap($gap)
//          column-rule($args)
//          column-width($width)
//      flexbox()
//          flex($args)
//          order($args)
//          align($args)
//          justify-content($args)
//      gradient($default,$start,$stop) *
//          linear-gradient-top($default,$color1,$stop1,$color2,$stop2,[$color3,$stop3,$color4,$stop4])*
//          linear-gradient-left($default,$color1,$stop1,$color2,$stop2,[$color3,$stop3,$color4,$stop4])*
//      transform($args)
//          transform-origin($args)
//          transform-style($style)
//          rotate($deg)
//          scale($factor)
//          translate($x,$y)
//          translate3d($x,$y,$z)
//          translateHardware($x,$y) *
//      text-shadow($args)
//      transition($args)
//          transition-delay($delay)
//          transition-duration($duration)
//          transition-property($property)
//          transition-timing-function($function)


// Animation

@mixin animation($args) {
    -webkit-animation: $args;
    -moz-animation: $args;
    -ms-animation: $args;
    -o-animation: $args;
    animation: $args;
}
@mixin animation-delay($delay) {
    -webkit-animation-delay: $delay;
    -moz-animation-delay: $delay;
    -ms-animation-delay: $delay;
    -o-animation-delay: $delay;
    animation-delay: $delay;
}
@mixin animation-direction($direction) {
    -webkit-animation-direction: $direction;
    -moz-animation-direction: $direction;
    -ms-animation-direction: $direction;
    -o-animation-direction: $direction;
}
@mixin animation-duration($duration) {
    -webkit-animation-duration: $duration;
    -moz-animation-duration: $duration;
    -ms-animation-duration: $duration;
    -o-animation-duration: $duration;
}
@mixin animation-fill-mode($mode) {
    -webkit-animation-fill-mode: $mode;
    -moz-animation-fill-mode: $mode;
    -ms-animation-fill-mode: $mode;
    -o-animation-fill-mode: $mode;
    animation-fill-mode: $mode;
}
@mixin animation-iteration-count($count) {
    -webkit-animation-iteration-count: $count;
    -moz-animation-iteration-count: $count;
    -ms-animation-iteration-count: $count;
    -o-animation-iteration-count: $count;
    animation-iteration-count: $count;
}
@mixin animation-name($name) {
    -webkit-animation-name: $name;
    -moz-animation-name: $name;
    -ms-animation-name: $name;
    -o-animation-name: $name;
    animation-name: $name;
}
@mixin animation-play-state($state) {
    -webkit-animation-play-state: $state;
    -moz-animation-play-state: $state;
    -ms-animation-play-state: $state;
    -o-animation-play-state: $state;
    animation-play-state: $state;
}
@mixin animation-timing-function($function) {
    -webkit-animation-timing-function: $function;
    -moz-animation-timing-function: $function;
    -ms-animation-timing-function: $function;
    -o-animation-timing-function: $function;
    animation-timing-function: $function;
}

// Keyframes
@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }
  @-moz-keyframes #{$animation-name} {
    @content;
  }
  @keyframes #{$animation-name} {
    @content;
  }
}

// Backface-visibility

@mixin backface-visibility($args) {
    -webkit-backface-visibility: $args;
    -moz-backface-visibility: $args;
    -ms-backface-visibility: $args;
    backface-visibility: $args;
}


// Background Size

@mixin background-size($args) {
    -webkit-background-size: $args;
    background-size: $args;
}

// Box Sizing

@mixin box-sizing($args) {
    -webkit-box-sizing: $args;
    -moz-box-sizing: $args;
    box-sizing: $args;
}
@mixin border-box(){
    @include box-sizing(border-box);
}
@mixin content-box(){
    @include box-sizing(content-box);
}


// Columns

@mixin columns($args) {
    -webkit-columns: $args;
    -moz-columns: $args;
    columns: $args;
}
@mixin column-count($count) {
    -webkit-column-count: $count;
    -moz-column-count: $count;
    column-count: $count;
}
@mixin column-gap($gap) {
    -webkit-column-gap: $gap;
    -moz-column-gap: $gap;
    column-gap: $gap;
}
@mixin column-width($width) {
    -webkit-column-width: $width;
    -moz-column-width: $width;
    column-width: $width;
}
@mixin column-rule($args) {
    -webkit-column-rule: $args;
    -moz-column-rule: $args;
    column-rule: $args;
}

// Filter
@mixin filter($args) {
    -webkit-filter: $args;
    -moz-filter: $args;
    -o-filter: $args;
    -ms-filter: $args;
}

// Flexbox
@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}
    @mixin flex($values) {
      -webkit-box-flex: $values;
      -moz-box-flex:  $values;
      -webkit-flex:  $values;
      -ms-flex:  $values;
      flex:  $values;
    }
    @mixin order($val) {
      -webkit-box-ordinal-group: $val;
      -moz-box-ordinal-group: $val;
      -ms-flex-order: $val;
      -webkit-order: $val;
      order: $val;
    }
    @mixin align($align) {
      -webkit-flex-align: $align;
      -ms-flex-align: $align;
      -webkit-align-items: $align;
      align-items: $align;
    }
    @mixin justify-content($val) {
      -webkit-justify-content: $val;
      justify-content: $val;
    }
// Gradients

@mixin gradient($default: #F5F5F5, $start: #EEE, $stop: #FFF) {
    @include linear-gradient-top($default,$start,0%,$stop,100%);
}
@mixin linear-gradient-top($default,$color1,$stop1,$color2,$stop2) {
    background-color: $default;
    background-image: -webkit-gradient(linear, left top, left bottom, color-stop($stop1, $color1), color-stop($stop2 $color2));
    background-image: -webkit-linear-gradient(top, $color1 $stop1, $color2 $stop2);
    background-image: -moz-linear-gradient(top, $color1 $stop1, $color2 $stop2);
    background-image: -ms-linear-gradient(top, $color1 $stop1, $color2 $stop2);
    background-image: -o-linear-gradient(top, $color1 $stop1, $color2 $stop2);
    background-image: linear-gradient(top, $color1 $stop1, $color2 $stop2);
}
@mixin linear-gradient-top2($default,$color1,$stop1,$color2,$stop2,$color3,$stop3) {
    background-color: $default;
    background-image: -webkit-gradient(linear, left top, left bottom, color-stop($stop1, $color1), color-stop($stop2 $color2), color-stop($stop3 $color3));
    background-image: -webkit-linear-gradient(top, $color1 $stop1, $color2 $stop2, $color3 $stop3);
    background-image: -moz-linear-gradient(top, $color1 $stop1, $color2 $stop2, $color3 $stop3);
    background-image: -ms-linear-gradient(top, $color1 $stop1, $color2 $stop2, $color3 $stop3);
    background-image: -o-linear-gradient(top, $color1 $stop1, $color2 $stop2, $color3 $stop3);
    background-image: linear-gradient(top, $color1 $stop1, $color2 $stop2, $color3 $stop3);
}
@mixin linear-gradient-top3($default,$color1,$stop1,$color2,$stop2,$color3,$stop3,$color4,$stop4) {
    background-color: $default;
    background-image: -webkit-gradient(linear, left top, left bottom, color-stop($stop1, $color1), color-stop($stop2 $color2), color-stop($stop3 $color3), color-stop($stop4 $color4));
    background-image: -webkit-linear-gradient(top, $color1 $stop1, $color2 $stop2, $color3 $stop3, $color4 $stop4);
    background-image: -moz-linear-gradient(top, $color1 $stop1, $color2 $stop2, $color3 $stop3, $color4 $stop4);
    background-image: -ms-linear-gradient(top, $color1 $stop1, $color2 $stop2, $color3 $stop3, $color4 $stop4);
    background-image: -o-linear-gradient(top, $color1 $stop1, $color2 $stop2, $color3 $stop3, $color4 $stop4);
    background-image: linear-gradient(top, $color1 $stop1, $color2 $stop2, $color3 $stop3, $color4 $stop4);
}
@mixin linear-gradient-left($default,$color1,$stop1,$color2,$stop2) {
    background-color: $default;
    background-image: -webkit-gradient(linear, left top, left top, color-stop($stop1, $color1), color-stop($stop2 $color2));
    background-image: -webkit-linear-gradient(left, $color1 $stop1, $color2 $stop2);
    background-image: -moz-linear-gradient(left, $color1 $stop1, $color2 $stop2);
    background-image: -ms-linear-gradient(left, $color1 $stop1, $color2 $stop2);
    background-image: -o-linear-gradient(left, $color1 $stop1, $color2 $stop2);
    background-image: linear-gradient(left, $color1 $stop1, $color2 $stop2);
}
@mixin linear-gradient-left2($default,$color1,$stop1,$color2,$stop2,$color3,$stop3) {
    background-color: $default;
    background-image: -webkit-gradient(linear, left top, left top, color-stop($stop1, $color1), color-stop($stop2 $color2), color-stop($stop3 $color3));
    background-image: -webkit-linear-gradient(left, $color1 $stop1, $color2 $stop2, $color3 $stop3);
    background-image: -moz-linear-gradient(left, $color1 $stop1, $color2 $stop2, $color3 $stop3);
    background-image: -ms-linear-gradient(left, $color1 $stop1, $color2 $stop2, $color3 $stop3);
    background-image: -o-linear-gradient(left, $color1 $stop1, $color2 $stop2, $color3 $stop3);
    background-image: linear-gradient(left, $color1 $stop1, $color2 $stop2, $color3 $stop3);
}
@mixin linear-gradient-left3($default,$color1,$stop1,$color2,$stop2,$color3,$stop3,$color4,$stop4) {
    background-color: $default;
    background-image: -webkit-gradient(linear, left top, left top, color-stop($stop1, $color1), color-stop($stop2 $color2), color-stop($stop3 $color3), color-stop($stop4 $color4));
    background-image: -webkit-linear-gradient(left, $color1 $stop1, $color2 $stop2, $color3 $stop3, $color4 $stop4);
    background-image: -moz-linear-gradient(left, $color1 $stop1, $color2 $stop2, $color3 $stop3, $color4 $stop4);
    background-image: -ms-linear-gradient(left, $color1 $stop1, $color2 $stop2, $color3 $stop3, $color4 $stop4);
    background-image: -o-linear-gradient(left, $color1 $stop1, $color2 $stop2, $color3 $stop3, $color4 $stop4);
    background-image: linear-gradient(left, $color1 $stop1, $color2 $stop2, $color3 $stop3, $color4 $stop4);
}

// Text Shadow

@mixin text-shadow($args) {
    text-shadow: $args;
}


// Transforms

@mixin transform($args) {
    -webkit-transform: $args;
    -moz-transform: $args;
    -ms-transform: $args;
    -o-transform: $args;
    transform: $args;
}
@mixin transform-origin($args) {
    -webkit-transform-origin: $args;
    -moz-transform-origin: $args;
    -ms-transform-origin: $args;
    -o-transform-origin: $args;
    transform-origin: $args;
}
@mixin transform-style($style) {
    -webkit-transform-style: $style;
    -moz-transform-style: $style;
    -ms-transform-style: $style;
    -o-transform-style: $style;
    transform-style: $style;
}
@mixin rotate($deg:45deg){
    @include transform(rotate($deg));
}
@mixin scale($factor:.5){
    @include transform(scale($factor));
}
@mixin translate($x,$y){
    @include transform(translate($x,$y));
}
@mixin translate3d($x,$y,$z) {
    @include transform(translate3d($x,$y,$z));
}
@mixin translateHardware($x,$y) {
    @include translate($x,$y);
    -webkit-transform: translate3d($x,$y,0);
    -moz-transform: translate3d($x,$y,0);
    -o-transform: translate3d($x,$y,0);
    -ms-transform: translate3d($x,$y,0);
    transform: translate3d($x,$y,0);
}


// Transitions

@mixin transition($args:200ms) {
    -webkit-transition: $args;
    -moz-transition: $args;
    -o-transition: $args;
    -ms-transition: $args;
    transition: $args;
}
@mixin transition-delay($delay:0) {
    -webkit-transition-delay: $delay;
    -moz-transition-delay: $delay;
    -o-transition-delay: $delay;
    -ms-transition-delay: $delay;
    transition-delay: $delay;
}
@mixin transition-duration($duration:200ms) {
    -webkit-transition-duration: $duration;
    -moz-transition-duration: $duration;
    -o-transition-duration: $duration;
    -ms-transition-duration: $duration;
    transition-duration: $duration;
}
@mixin transition-property($property:all) {
    -webkit-transition-property: $property;
    -moz-transition-property: $property;
    -o-transition-property: $property;
    -ms-transition-property: $property;
    transition-property: $property;
}
@mixin transition-timing-function($function:ease) {
    -webkit-transition-timing-function: $function;
    -moz-transition-timing-function: $function;
    -o-transition-timing-function: $function;
    -ms-transition-timing-function: $function;
    transition-timing-function: $function;
}

// Clearfix

@mixin clearfix {
    // For modern browsers
    &:before,
    &:after
    {
        content:"";
        display:block;
        overflow:hidden;
    }

    &:after
    {
        clear:both;
    }

    //For IE 6/7 (trigger hasLayout)
    &
    {
        zoom: 1;
    }
}

// Linear gradient mixin

@mixin linear-gradient($angle, $first-color, $first-position, $second-color, $second-position) {
    background: $first-color; /* Old browsers */
    background: -moz-linear-gradient($angle, $first-color $first-position, $second-color $second-position); /* FF3.6+ */
    // background: -webkit-gradient(linear, left top, left bottom, color-stop($first-position,$first-color), color-stop($second-position,$second-color)); /* Chrome,Safari4+ */
    background: -webkit-linear-gradient($angle, $first-color $first-position,$second-color $second-position); /* Chrome10+,Safari5.1+ */
    background: -o-linear-gradient($angle, $first-color $first-position,$second-color $second-position); /* Opera 11.10+ */
    background: -ms-linear-gradient($angle, $first-color $first-position,$second-color $second-position); /* IE10+ */
    background: linear-gradient($angle, $first-color $first-position,$second-color $second-position); /* W3C */
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$first-color', endColorstr='$second-color',GradientType=0 ); /* IE6-9 */
}

// Box-Shadow mixin

@mixin box-shadow-2($args1, $args2) {
    -webkit-box-shadow: $args1, $args2;
    -moz-box-shadow: $args1, $args2;
    box-shadow: $args1, $args2;
}

//
// Basic style functions and mixins
//

$colors: () !default;
$fonts: () !default;
$font-sizes: () !default;
$font-weights: () !default;
$paddings: () !default;
$margins: () !default;
$rule-widths: () !default;

@function color($name) {
    @return get-item($colors, $name);
}
@function font($name) {
    @return get-item($fonts, $name);
}
@function font-size($name) {
    @return rem(get-item($font-sizes, $name));
}
@function font-weight($name) {
    @return get-item($font-weights, $name);
}
@function padding($name) {
    @return rem(get-item($paddings, $name) * $base-line-height);
}
@function margin($name) {
    @return rem(get-item($margins, $name) * $base-line-height);
}
@function rule-width($name) {
    @return rem(get-item($rule-widths, $name) * $base-line-height);
}

@mixin text-color($name, $force: false) {
    @if $force {
        color: color($name) !important;
    } @else {
        color: color($name);
    }
}

@mixin bg-color($name, $force: false) {
    @if $force {
        background-color: color($name) !important;

        @if (lightness(color($name)) < 50%) {
            @include text-color("white", false);
        } @else {
            @include text-color("black", false);
        }
    } @else {
        background-color: color($name);

        @if (lightness(color($name)) < 50%) {
            @include text-color("white");
        } @else {
            @include text-color("black");
        }
    }
}

@mixin border-color($name, $force: false) {
    @if $force {
        border-color: color($name) !important;
    } @else {
        border-color: color($name);
    }
}

@mixin border-left-color($name, $force: false) {
    @if $force {
        border-left-color: color($name) !important;
    } @else {
        border-left-color: color($name);
    }
}

@mixin border-top-color($name, $force: false) {
    @if $force {
        border-top-color: color($name) !important;
    } @else {
        border-top-color: color($name);
    }
}

@mixin border-right-color($name, $force: false) {
    @if $force {
        border-right-color: color($name) !important;
    } @else {
        border-right-color: color($name);
    }
}

@mixin border-bottom-color($name, $force: false) {
    @if $force {
        border-bottom-color: color($name) !important;
    } @else {
        border-bottom-color: color($name);
    }
}

@mixin font($name, $force: false) {
    @each $property, $value in font($name) {
        @if $force {
            #{$property}: $value !important;
        } @else {
            #{$property}: $value;
        }
    }
}

@mixin padding($name, $force: false) {
    @if $force {
        padding: padding($name) !important;
    } @else {
        padding: padding($name);
    }
}

@mixin padding-left($name, $force: false) {
    @if $force {
        padding-left: padding($name) !important;
    } @else {
        padding-left: padding($name);
    }
}

@mixin padding-top($name, $force: false) {
    @if $force {
        padding-top: padding($name) !important;
    } @else {
        padding-top: padding($name);
    }
}

@mixin padding-right($name, $force: false) {
    @if $force {
        padding-right: padding($name) !important;
    } @else {
        padding-right: padding($name);
    }
}

@mixin padding-bottom($name, $force: false) {
    @if $force {
        padding-bottom: padding($name) !important;
    } @else {
        padding-bottom: padding($name);
    }
}

@mixin margin($name, $force: false) {
    @if $force {
        margin: margin($name) !important;
    } @else {
        margin: margin($name);
    }
}

@mixin margin-left($name, $force: false) {
    @if $force {
        margin-left: margin($name) !important;
    } @else {
        margin-left: margin($name);
    }
}

@mixin margin-top($name, $force: false) {
    @if $force {
        margin-top: margin($name) !important;
    } @else {
        margin-top: margin($name);
    }
}

@mixin margin-right($name, $force: false) {
    @if $force {
        margin-right: margin($name) !important;
    } @else {
        margin-right: margin($name);
    }
}

@mixin margin-bottom($name, $force: false) {
    @if $force {
        margin-bottom: margin($name) !important;
    } @else {
        margin-bottom: margin($name);
    }
}

@mixin font-size($name, $force: false) {
    @if $force {
        font-size: font-size($name) !important;
        line-height: grid-line-height(rem(font-size($name)), $base-line-height, $min-line-height) !important;
    } @else {
        font-size: font-size($name);
        line-height: grid-line-height(rem(font-size($name)), $base-line-height, $min-line-height);
    }
}

@mixin font-weight($name, $force: false) {
    @if $force {
        font-weight: font-weight($name) !important;
    } @else {
        font-weight: font-weight($name);
    }
}

@mixin rule-width($name, $force: false) {
    @if $force {
        width: rule-width($name) !important;
    } @else {
        width: rule-width($name);
    }
}

@mixin border-width($name, $force: false) {
    @if $force {
        border-width: rule-width($name) !important;
    } @else {
        border-width: rule-width($name);
    }
}

@mixin border-left-width($name, $force: false) {
    @if $force {
        border-left-width: rule-width($name) !important;
    } @else {
        border-left-width: rule-width($name);
    }
}

@mixin border-top-width($name, $force: false) {
    @if $force {
        border-top-width: rule-width($name) !important;
    } @else {
        border-top-width: rule-width($name);
    }
}

@mixin border-right-width($name, $force: false) {
    @if $force {
        border-right-width: rule-width($name) !important;
    } @else {
        border-right-width: rule-width($name);
    }
}

@mixin border-bottom-width($name, $force: false) {
    @if $force {
        border-bottom-width: rule-width($name) !important;
    } @else {
        border-bottom-width: rule-width($name);
    }
}
